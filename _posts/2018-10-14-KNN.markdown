---
layout: post
category: 机器学习基础
tags: [KNN,算法]
---

KNN - k-Nearest-Neighbors
==============

## KNN算法

### 思路

> 如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别

### 距离

#### 欧拉距离（多维）：
$$
d(x,y)=\sqrt{\sum_{n}^{k=1}(x_{k}-y_{k})^{2}}
$$

#### 曼哈顿距离
$$
d(x,y)=\sqrt{\sum_{n}^{k=1}\left | x_{k}-y_{k} \right |}
$$

### 算法描述

1. 计算测试数据与各个训练数据之间的距离；
2. 按照距离的递增关系进行排序；
3. 选取距离最小的K个点；
4. 确定前K个点所在类别的出现频率；
5. 返回前K个点中出现频率最高的类别作为测试数据的预测分类。

## 算法模拟

### KNNclassifiera

(```)
import numpy as np
from math import sqrt
from collections import Counter

class KNNClassifier:
	def __init__(self, k):
		"""初始化分类器"""
		assert k >= 1, "k must be valid"
		self.k = k
		self._X_train = None
		self._y_train = None


	def fit(self, X_train, y_train):
		"""根据训练数据集X_train和y_train训练KNN分类器"""
		assert X_train.shape[0] == y_train.shape[0], \
		   "the size of X_train must be equal to the size of y_train"
		assert self.k <= X_train.shape[0], \
		   "the size of X_train must be at least k"

		self._X_train = X_train
		self._y_train = y_train
		return self


	def predict(self, X_predict):
		"""给定待预测数据集X_predict, 返回表示X_predict的结果向量"""
		assert self._X_train is not None and self._y_train is not None, \
		   "must fit before predict!"
		assert X_predict.shape[1] == self._X_train.shape[1], \
		   "the feature number of X_predict must be equal to X_train"

		y_predict = [self._predict(x) for x in X_predict]
		return np.array(y_predict)


	def _predict(self, x):
		""" 给定单个待预测数据x, 返回x_predict的预测结果值"""
		assert x.shape[0] == self._X_train.shape[1], \
		   "the feature number of x must be equal to X_train"
	
		distances = [sqrt(np.sum((x_train - x) ** 2))
				for x_train in self._X_train]
		nearest = np.argsort(distances)

		topK_y = [self._y_train[i] for i in nearest[:self.k]]
		votes = Counter(topK_y)

		return votes.most_common(1)[0][0]

	def __repr__(self):
		return "KNN(k=%d)" % self.k

(```)
