---
layout: post
category: 机器学习基础
tags: [numpy, 函数库]
---

numpy
===========

## 传入

	import numpy as np

## 创建数字矩阵

### 创建０矩阵

####  单行矩阵

	'np.zeros(10)'  # 默认float 指定int型　np.zeros(10, dtype=int）

####  ３行４列矩阵

     np.zeros((3,4)) #np.zeros(shape=(3,4))

### 创建１矩阵

    np.ones((3,4)

### 创建全ｎ矩阵

    np.full((3,5), 666) #np.full(shape=(3,5), fill_value=666.0) #如果是666是int型
	
### 创建循环数列	

#### 从０到１０，每0.2取点

    np.arange(0,10,0.2) #np.arange(起始数，截至数， 步长) 默认起始为０步长为１

#### 从０到２０，等距截出５个数（包含开始数和截至数）

    np.linspace(0,20,5)
	
### 创建随机数列

#### 含有１０个元素，０开始不超过１０的随机整数数列

    np.random.randint(0,10,size=10) #取到0,但取不到１０

#### ３行５列的矩阵, ０开始不超过１０的随机整数数列

    np.random.randint(0,10,size=(3,5))

#### 创建每次相同的随机数

    np.random.seed(666) 
    np.random.randint(0,10,size=(3,5))

#### 创建１０个随机浮点数向量

    np.random.random(10)

#### 创建３行５列的浮点数矩阵

    np.random.random((3,5))

#### 创建均值为１０方差为１００的符合正态分布的随机浮点数

    np.random.normal(10,100,size=10)

## 数组的基本属性

### X=np.arange(15).reshape(3,5)

#### 查看数组的维度

    X.ndim

#### 查看数组的维度，并显示每个维度上有多少数组

    X.shape

#### 查看数组元素个数

    X.size

#### 访问第２行２列的元素

    X[2,2]

#### 访问前２行前３个数

    X[:2,:3］

#### 访问前２行前4个数,间隔为２

    X[:2,:4:2]

## 矩阵的基本性质

### 矩阵运算

#### 矩阵求反

    X[::-1,::-1]

#### 矩阵取第一行

    X[:, 0]

#### 矩阵取第一列

    X[0, :]

### 子矩阵	　　

#### 创建子矩阵

    subX = X[:2,:3] #修改subX会影响原矩阵

#### 创建单独的子矩阵

    subX = X[:2,:3].copy() $此时subX的修改不会影响原矩阵

### 改变矩阵的维度

#### 将数组改变为５行３列的数组

    Ａ = X.reshape(5,3) 
    #1,转变后元素个数须与转换前相等
    #2,reshape不会改变原矩阵，需要存储在其他变量里

#### 将矩阵转换为３行的矩阵

    x.reshape(3,-1)

#### 将矩阵转换为３列的矩阵

    x.reshape(-1,3)
	
### 矩阵的合并

#### A = np.arange(6).reshape(2,-1)

#### B = np.arange(6,10).reshape(2,-1)

#### c = np.full(3,666)

#### d = np.full((2,1),666)

#### #在矩阵后添加新矩阵行

    np.concatenate([A,B])

#### 在矩阵后添加新矩阵列

    np.concatenate([A,B], axis=1)　#axis=０为添加行　１添加列　２，３．．表示添加到更高维度(如矩阵的第３维...)

#### 在矩阵后添加新的矩阵行

    np.vstack([A,c])

#### 在矩阵后添加新的矩阵列

    np.hstack([A,d])

### 矩阵的分割

#### x= np.arange(10)

#### A = np.arange(16).reshape((4,4))

#### 将向量x以３，７为节点分割

	x1, x2, x3 = np.split(x, [3,7]) # x1 = array([0, 1, 2])

#### 将矩阵按照第二行来分割

    A1, A2 = np.split(A,[2])　# A1 = array([[0, 1, 2, 3],[4, 5, 6, 7]])

#### 将矩阵按照第二列来分割

    A1, A2 = np.split(A,[2], axis=1) #　A1 = array([[ 0,  1],
       					        [ 4,  5],
       						[ 8,  9],
       						[12, 13]])
#### 以垂直方式分割矩阵

    upper, lower = np.vsplit(A, [2])

#### 以水平方式分割矩阵

    left, right = np.hsplit(A, [2])
	
### 矩阵的运算

#### X = np.arange(1, 16).reshape((3, 5))

#### A = np.arange(4).reshape(2,2)

#### B　=　np.full((2,2),10)

#### v = np.array([1,2])
	    
#### 矩阵与数的运算

    加　X+1, 减 X-1, 乘 X*2, 除　X/2(浮点除)　X//2(整数除),　乘方 X**2,　求余 X%2,
	　　　　	
    绝对值 np.abs(X), 正弦 np.sin(X), e^X np.exp(X), 3^X np.power(3, X),
		
    以ｅ为底的自然对数　log(X)，以１０为底的自然对数log10,
	    
#### 矩阵与矩阵间的运算
		
    加　A+B, 减　A-B, 
		
    乘　A.dot(B) #　A*B只是对应位相乘，并非矩阵乘法，
		
#### 矩阵的转置　A.T

#### 向量与矩阵间运算
	    	
#### 将向量进行堆叠
		
    np.tile(v,(2,1)) #　行堆叠２次　列堆叠一次

#### 矩阵逆运算
		
#### 矩阵的逆

    invA = np.linalg.inv(A)
		
#### 矩阵的伪逆

    pinvX = np.linalg.pinv(X)
	
### 聚合操作

#### L =np.random.random(100).reshape(10,10)
	    
#### 求矩阵所有项的和
		
    np.sum(L)

#### 求矩阵某列的和(沿着行=逐列)
		 
    np.sum(L, axis=0)　# axis = 1　逐行
	    
#### 求矩阵中最小值
		
    np.min(L)

#### 求矩阵中最大值	
		
    np.max(L)

#### 矩阵所有元素的乘

    np.prod(L)

#### 矩阵所有元素的平均值
		
    np.mean(L)
	    
#### 矩阵所有元素的中位数
		
    np.median(L)
	    
#### 矩阵中的百分位
		
    np.percentile(L,50)　#　求矩阵Ｌ中50%都小于的数

#### 求多个百分位的点
		　　　　
    for percent in (0, 25, 50, 75, 100):
        print(np.percentile(L, percent))

#### 矩阵中元素的方差
		
    np.var(L)

#### 矩阵中元素的标准差
		
    np.std(L)
	
### 索引

#### X=np.random.normal(0,1,size=100000).reshape(1000,-1)

#### 求向量ｘ中最小值的位置
		
    np.argmin(X) 
	
### 排序
	    
#### x = np.arange(16)
	
#### X = np.random.randint(10, size=(4,4))
 	    
#### 乱序向量ｘ(乱序原向量)

    np.random.shuffle(x)

#### 乱序向量x（新建一个新的乱序向量）

	np.random.permutation(x)

#### 乱序向量索引

	index = np.random.permutation(len(x))
	x[index] #　得到乱序后的矩阵

#### 按索引乱序矩阵Ｘ

	index = np.random.permutation(len(X))
	x[index] #　得到乱序后的矩阵

#### 对向量ｘ进行排序

    np.sort(x) #　不改变x

    x.sort(x)　 #　改变ｘ

#### 对矩阵Ｘ进行排序

    np.sort(X)　#　对每行进行排序，默认axis=1

### 排序及索引

#### 排序后显示索引

    np.argsort(x)
	    
#### 以９分割所有的数

    np.partition(x, 9)　#　9左右两边不一定有序

#### 以９分割所有的数以索引方式显示

    np.argpartition(x, 9)

### Fancy Indexing

#### x = np.arange(16)

#### X = x.reshape(4, -1)

#### 访问向量ｘ索引为３，５，８的元素的值

    ind = [3, 5, 8]
    x[ind]

#### 按照索引从ｘ中取出值，并排列成矩阵

    ind = np.array([[0,2],[1,3]])
    x[ind]

#### 从矩阵Ｘ中取出(0,1),(1,2),(2,3)这几个点

    row = np.array([0,1,2])
    col = np.array([1,2,3])
    x[row, col]
	    
#### 用bool从１到３行中取出0,2,3列
		
    col = [True, False, True, True]
    X[1:3,　col]

### numpy.array比较

#### x = np.arange(16)

#### X = x.reshape(4, -1)

#### 向量x<3的值用bool函数表示

    x < 3

#### 矩阵Ｘ>6的值用bool函数表示

    X>6

#### 计算向量ｘ中>３的数

    np.sum(x>3)

#### 计算向量ｘ中>=３的数

    np.count_nonzero(x>=3)

#### 矩阵Ｘ中是否有０元素

    np.any(X) #　True　表示存在

#### 是否矩阵Ｘ中所有元素都     0

    np.all(X<0) # False 表示有数不大于０

#### 向量ｘ中>3同时<10的元素个个数

    np.sum((x>3) & (x<10))

#### 向量ｘ中!=0的元素个个数

    np.sum(~(x==0))

#### 取出Ｘ矩阵最后一行可以被３整除的行

    X[X[:,-1]%3 =[0, :]

## 数据分类

####  将大于0的数据置为1，小于0的数据置为-1	
	
	np.where(x>0, 1, -1)

## 数值归一化

> 将所有的数据映射到同一尺度

### x = np.random.randint(0, 100, size=100)

### X = np.random.randint(0,100,(50,2))

### X = np.array(X, dtype=float)

### 最值归一化 normalization

> 将所有数据映射到0-1之间
$$
        x_{scale} = \frac{x-x_{min}}{x_{max}-x_{min}}
$$

1. 适用于分布有明显边界的特征值

2. 受outliner影响大

	x = (x - np.min(x))/(np.max(x)-np.min(x))

	X[:, 0] = (X[:,0] - np.min(X[:, 0]))/(np.max(X[:,0]) - np.min(X[:, 0]))

### 均值方差归一化 standardization

> 将所有数据归一到均值为0方差为1的分布中（x_mean为均值 S为方差）
$$
        x_{scale} = \frac{x-x_{mean}}{S}
$$

1. 适用于分布没有明显的边界

2. 有可能存在极端数据值

	X[:, 0] = (X[:,0] - np.mean(X[:, 0]))/np.std(X[:,0])

### 非线性归一化

1. 经常用在数据分化比较大的场景，有些数值很大，有些很小。该方法包括 log、指数，正切等。

2. 需要根据数据分布的情况，决定非线性函数的曲线。 
